{"version":3,"file":"static/js/869.653ef5d3.chunk.js","mappings":"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","sources":["components/styled/Parts.styled.js","redux/contacts/selectors.js","redux/filter/selectors.js","components/Form.jsx","components/ContactItem.jsx","components/ContactList.jsx","components/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n\nconst aditionalColor = '#fcb577 ';\nconst shadowColor = 'rgba(165, 140, 100, 0.25)';\n\nexport const Section = styled('section')({\n    width: '100vw',\n    height: '100vh',\n    padding: 40,\n    backgroundImage: `linear-gradient(90deg, #ffffff 0%, ${aditionalColor} 100%)`,\n})\n\nexport const FormWrapper = styled('div')({\n    width: 320,\n    margin: '0 auto 40px',\n    padding: 20,\n    //backgroundImage: `linear-gradient(270deg, #ffffff 0%, ${aditionalColor} 100%)`,\n    backgroundColor: \"#fff\",\n    borderRadius: 15,\n    boxShadow: `0px 10px 30px 0px rgba(0, 0, 0, 0.08), ${shadowColor}`,\n    fontFamily: 'sans-serif',\n})\n\nexport const ListWrapper = styled('div')({\n    width: 320,\n    margin: '0 auto',\n    padding: 20,\n    //backgroundImage: `linear-gradient(270deg, #ffffff 0%, ${aditionalColor} 100%)`,\n    backgroundColor: \"#fff\",\n    borderRadius: 15,\n    boxShadow: `0px 10px 30px 0px rgba(0, 0, 0, 0.08), ${shadowColor}`,\n    fontFamily: 'sans-serif',\n})\n\nexport const InputLabelWrapper = styled('div')({\n    display: 'flex',\n    gap: 4,\n    flexDirection: 'column',\n    marginBottom: 20,\n})\n\nexport const Input = styled('input')({\n    height: 34,\n    border: `0.5px solid ${aditionalColor}`,\n    borderRadius: 10,\n    padding: 8,\n    fontSize: 16,\n    transition: 'boxShadow, easy, 300ms',\n\n    '&:hover': {\n        boxShadow: `0px 10px 30px 0px ${shadowColor}`,\n    }\n})\n\nexport const Button = styled('button')({\n    width: '100%',\n    height: 44,\n    backgroundColor: aditionalColor,\n    fontSize: 16,\n    fontWeight: 600,\n    transition: 'boxShadow, easy, 300ms; backgroundColor, easy, 300ms',\n    cursor: 'pointer',\n    borderRadius: 10,\n    border: aditionalColor,\n    marginBottom: 20,\n\n    '&:hover, &:focus': {\n        boxShadow: `0px 10px 30px 0px ${shadowColor}`,\n        backgroundColor: '#e89e5d',\n    },\n\n    '&:active': {\n    backgroundColor: '#965821',\n    }\n})\n\nexport const List = styled('ul')({\n    margin: 0,\n    padding: 0,\n    listStyle: 'none',\n    textDecoration: 'none',\n})\n\nexport const ContactName = styled('p')({\n    margin: '0 0 4px',\n    fontWeight: 600,\n})\n\nexport const ContactNumber = styled('p')({\n    margin: '0 0 4px',\n})\n\nexport const DeleteBtn = styled('button')({\n    width: 90,\n    height: 30,\n    transition: 'boxShadow, easy, 300ms; backgroundColor, easy, 300ms',\n    cursor: 'pointer',\n    borderRadius: 10,\n    border: `0.5px solid ${aditionalColor}`,\n    backgroundColor: aditionalColor,\n    padding: '0 15px',\n\n    '&:hover, &:focus': {\n        boxShadow: `0px 10px 30px 0px ${shadowColor}`,\n        backgroundColor: '#e89e5d',\n    },\n\n    '&:active': {\n    backgroundColor: '#965821',\n    }\n})\n\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'redux/filter/selectors';\n\n\nexport const selectLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","export const selectFilter = state => state.filter;\n","import { nanoid } from '@reduxjs/toolkit';\nimport { InputLabelWrapper, Input, Button } from './styled/Parts.styled';\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContacts } from 'redux/contacts/thunks';\n\nconst Form = () => {\n  const [contactName, setContactName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  //\n  const createContact = (contactName, number) => {\n    const alreadyExist = contacts.find(\n      item => item.contactName === contactName\n    );\n    if (alreadyExist) return alert(`Contact '${contactName}' already exist`);\n\n    const newContact = {\n      id: nanoid(),\n      contactName,\n      number,\n    };\n\n    dispatch(addContacts(newContact));\n  };\n\n  //change\n  const handleChange = ({ target: { value, name } }) => {\n    name === 'contactName' ? setContactName(value) : setNumber(value);\n    //console.log(value, name);\n  };\n\n  //submit\n  const handleSubmit = e => {\n    e.preventDefault();\n    createContact(contactName, number);\n\n    setContactName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <InputLabelWrapper>\n        <label htmlFor=\"nameInput\">Name</label>\n        <Input\n          type=\"text\"\n          name=\"contactName\"\n          //pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          id=\"nameInput\"\n          value={contactName}\n          onChange={handleChange}\n          autoFocus\n        />\n      </InputLabelWrapper>\n\n      <InputLabelWrapper>\n        <label htmlFor=\"telInput\">Number</label>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          //pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          id=\"telInput\"\n          value={number}\n          onChange={handleChange}\n        />\n      </InputLabelWrapper>\n\n      <Button type=\"submit\">Create</Button>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from 'react';\n\nimport { ContactName, ContactNumber, DeleteBtn } from './styled/Parts.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContacts } from 'redux/contacts/thunks';\n\n\nconst ContactItem = ({ item }) => {\n  // const [idItem] = useState([item].id)\n  const dispatch = useDispatch();\n  // delete\n  const handleDelete = itemId => {\n    dispatch(deleteContacts(itemId));\n  };\n\n  return (\n    <li style={{ marginBottom: 20 }}>\n      <ContactName>{item.contactName}</ContactName>\n      <ContactNumber>{item.number}</ContactNumber>\n      <DeleteBtn type=\"button\" onClick={() => handleDelete(item.id)}>\n        ✖ Delete\n      </DeleteBtn>\n    </li>\n  );\n};\n\nexport default ContactItem;\n","import React from 'react';\n\nimport ContactItem from './ContactItem';\nimport { List } from './styled/Parts.styled';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nconst ContactList = () => {\n  const filtered = useSelector(selectVisibleContacts);\n\n  return (\n    <div>\n      <List>\n        {filtered.map(oneCont => (\n          <ContactItem item={oneCont} key={oneCont.id} />\n        ))}\n      </List>\n    </div>\n  );\n};\n\nexport default ContactList;\n","import React from 'react'\n\nimport {Input, InputLabelWrapper} from './styled/Parts.styled'\nimport { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/filter/filterSlice';\n\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChangeFilter = ({ target: { value } }) => {\n    //console.log('filter', value);\n    const valueToDispatch = value.trim().toLowerCase();\n    dispatch(changeFilter(valueToDispatch));\n    //console.log('valueToDispatch', valueToDispatch);\n  };\n\n  return (\n    <InputLabelWrapper>\n      <label htmlFor=\"filterInput\">Find contact by name</label>\n      <Input\n        name=\"name\"\n        type=\"text\"\n        onChange={handleChangeFilter}\n        id=\"filterInput\"\n      />\n    </InputLabelWrapper>\n  );\n}\n\nexport default Filter","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/thunks';\n//import { selectLoading } from 'redux/contacts/selectors';\n\nimport Form from 'components/Form';\nimport ContactList from 'components/ContactList';\n//import { Loader } from 'components/Loader';\nimport { FormWrapper, ListWrapper, Section } from 'components/styled/Parts.styled';\nimport Filter from 'components/Filter';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  //const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts()); \n  }, [dispatch]);\n\n  return (\n    <>\n  <Section>\n    <FormWrapper>\n      <Form />\n    </FormWrapper>\n    <ListWrapper>\n      <Filter />\n      <ContactList />\n    </ListWrapper>\n  </Section>\n    </>\n  );\n}\n"],"names":["aditionalColor","shadowColor","Section","styled","width","height","padding","backgroundImage","concat","FormWrapper","margin","backgroundColor","borderRadius","boxShadow","fontFamily","ListWrapper","InputLabelWrapper","display","gap","flexDirection","marginBottom","Input","border","fontSize","transition","Button","fontWeight","cursor","List","listStyle","textDecoration","ContactName","ContactNumber","DeleteBtn","selectContacts","state","contacts","items","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","_useState","useState","_useState2","_slicedToArray","contactName","setContactName","_useState3","_useState4","number","setNumber","dispatch","useDispatch","useSelector","handleChange","_ref","_ref$target","target","value","_jsxs","onSubmit","e","preventDefault","find","item","alert","newContact","id","nanoid","addContacts","createContact","children","_jsx","htmlFor","type","title","required","onChange","autoFocus","style","onClick","itemId","deleteContacts","filtered","map","oneCont","ContactItem","valueToDispatch","trim","changeFilter","Tasks","useEffect","fetchContacts","_Fragment","Form","Filter","ContactList"],"sourceRoot":""}