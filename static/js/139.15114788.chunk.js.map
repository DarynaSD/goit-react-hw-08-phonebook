{"version":3,"file":"static/js/139.15114788.chunk.js","mappings":"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","sources":["../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js","redux/filter/selectors.js","components/Form.jsx","components/ContactItem.jsx","components/ContactList.jsx","components/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'redux/filter/selectors';\n\n\nexport const selectLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","export const selectFilter = state => state.filter;\n","//import { nanoid } from '@reduxjs/toolkit';\nimport { InputLabelWrapper, Input, Button } from './styled/Parts.styled';\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContacts } from 'redux/contacts/thunks';\n\nconst Form = () => {\n  const [name, setContactName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  //\n  const createContact = (name, number) => {\n    const alreadyExist = contacts.find(\n      item => item.contactName === name\n    );\n    if (alreadyExist) return alert(`Contact '${name}' already exist`);\n\n    // const newContact = {\n    //   id: nanoid(),\n    //   contactName,\n    //   number,\n    // };\n\n    dispatch(addContacts({ name, number }));\n  };\n\n  //change\n  const handleChange = ({ target: { value, name } }) => {\n    name === 'contactName' ? setContactName(value) : setNumber(value);\n    //console.log(value, name);\n  };\n\n  //submit\n  const handleSubmit = e => {\n    e.preventDefault();\n    createContact(name, number);\n\n    setContactName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <InputLabelWrapper>\n        <label htmlFor=\"nameInput\">Name</label>\n        <Input\n          type=\"text\"\n          name=\"contactName\"\n          //pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          id=\"nameInput\"\n          value={name}\n          onChange={handleChange}\n          autoFocus\n        />\n      </InputLabelWrapper>\n\n      <InputLabelWrapper>\n        <label htmlFor=\"telInput\">Number</label>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          //pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          id=\"telInput\"\n          value={number}\n          onChange={handleChange}\n        />\n      </InputLabelWrapper>\n\n      <Button type=\"submit\">Create</Button>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from 'react';\n\nimport { ContactName, ContactNumber, DeleteBtn } from './styled/Parts.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContacts } from 'redux/contacts/thunks';\n\n\nconst ContactItem = ({ item }) => {\n  // const [idItem] = useState([item].id)\n  const dispatch = useDispatch();\n  // delete\n  const handleDelete = itemId => {\n    dispatch(deleteContacts(itemId));\n  };\n\n  return (\n    <li style={{ marginBottom: 20 }}>\n      <ContactName>{item.name}</ContactName>\n      <ContactNumber>{item.number}</ContactNumber>\n      <DeleteBtn type=\"button\" onClick={() => handleDelete(item.id)}>\n        ✖ Delete\n      </DeleteBtn>\n    </li>\n  );\n};\n\nexport default ContactItem;\n","import React from 'react';\n\nimport ContactItem from './ContactItem';\nimport { List } from './styled/Parts.styled';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nconst ContactList = () => {\n  const filtered = useSelector(selectVisibleContacts);\n\n  return (\n    <div>\n      <List>\n        {filtered.map(oneCont => (\n          <ContactItem item={oneCont} key={oneCont.id} />\n        ))}\n      </List>\n    </div>\n  );\n};\n\nexport default ContactList;\n","import React from 'react'\n\nimport {Input, InputLabelWrapper} from './styled/Parts.styled'\nimport { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/filter/filterSlice';\n\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChangeFilter = ({ target: { value } }) => {\n    //console.log('filter', value);\n    const valueToDispatch = value.trim().toLowerCase();\n    dispatch(changeFilter(valueToDispatch));\n    //console.log('valueToDispatch', valueToDispatch);\n  };\n\n  return (\n    <InputLabelWrapper>\n      <label htmlFor=\"filterInput\">Find contact by name</label>\n      <Input\n        name=\"name\"\n        type=\"text\"\n        onChange={handleChangeFilter}\n        id=\"filterInput\"\n      />\n    </InputLabelWrapper>\n  );\n}\n\nexport default Filter","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/thunks';\n//import { selectLoading } from 'redux/contacts/selectors';\n\nimport Form from 'components/Form';\nimport ContactList from 'components/ContactList';\n//import { Loader } from 'components/Loader';\nimport { FormWrapper, ListWrapper, Section } from 'components/styled/Parts.styled';\nimport Filter from 'components/Filter';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  //const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts()); \n  }, [dispatch]);\n\n  return (\n    <>\n  <Section>\n    <FormWrapper>\n      <Form />\n    </FormWrapper>\n    <ListWrapper>\n      <Filter />\n      <ContactList />\n    </ListWrapper>\n  </Section>\n    </>\n  );\n}\n"],"names":["NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","state","contacts","items","selectVisibleContacts","filter","contact","toLowerCase","includes","_useState","useState","_useState2","_slicedToArray","setContactName","_useState3","_useState4","number","setNumber","dispatch","useDispatch","useSelector","handleChange","_ref","_ref$target","target","_jsxs","onSubmit","e","preventDefault","item","contactName","alert","addContacts","createContact","children","InputLabelWrapper","_jsx","htmlFor","Input","type","title","required","id","onChange","autoFocus","Button","style","marginBottom","ContactName","ContactNumber","DeleteBtn","onClick","itemId","deleteContacts","filtered","List","oneCont","ContactItem","valueToDispatch","trim","changeFilter","Tasks","useEffect","fetchContacts","_Fragment","Section","FormWrapper","Form","ListWrapper","Filter","ContactList"],"sourceRoot":""}